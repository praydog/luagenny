# This file is automatically generated from cmake.toml - DO NOT EDIT
# See https://github.com/build-cpp/cmkr for more information

cmake_minimum_required(VERSION 3.15)

if(CMAKE_SOURCE_DIR STREQUAL CMAKE_BINARY_DIR)
	message(FATAL_ERROR "In-tree builds are not supported. Run CMake from a separate directory: cmake -B build")
endif()

# Regenerate CMakeLists.txt automatically in the root project
set(CMKR_ROOT_PROJECT OFF)
if(CMAKE_CURRENT_SOURCE_DIR STREQUAL CMAKE_SOURCE_DIR)
	set(CMKR_ROOT_PROJECT ON)

	# Bootstrap cmkr
	include(cmkr.cmake OPTIONAL RESULT_VARIABLE CMKR_INCLUDE_RESULT)
	if(CMKR_INCLUDE_RESULT)
		cmkr()
	endif()

	# Enable folder support
	set_property(GLOBAL PROPERTY USE_FOLDERS ON)
endif()

# Create a configure-time dependency on cmake.toml to improve IDE support
if(CMKR_ROOT_PROJECT)
	configure_file(cmake.toml cmake.toml COPYONLY)
endif()

add_compile_options($<$<CXX_COMPILER_ID:MSVC>:/MP>)
option(LUAGENNY_BUILD_STATIC OFF)
message("${LUAGENNY_BUILD_STATIC}")

project(luagenny)

if(CMKR_ROOT_PROJECT AND NOT CMKR_DISABLE_VCPKG)
	include(FetchContent)
	message(STATUS "Fetching vcpkg (2022.08.15)...")
	FetchContent_Declare(vcpkg URL "https://github.com/microsoft/vcpkg/archive/refs/tags/2022.08.15.tar.gz")
	FetchContent_GetProperties(vcpkg)
	if(NOT vcpkg_POPULATED)
		FetchContent_Populate(vcpkg)
		include("${vcpkg_SOURCE_DIR}/scripts/buildsystems/vcpkg.cmake")
	endif()
endif()

include(FetchContent)

message(STATUS "Fetching sdkgenny (5a6768a13d7d929cc7495d95d5f604593efcfd50)...")
FetchContent_Declare(sdkgenny
	GIT_REPOSITORY
		"https://github.com/cursey/sdkgenny.git"
	GIT_TAG
		5a6768a13d7d929cc7495d95d5f604593efcfd50
)
FetchContent_MakeAvailable(sdkgenny)

# Packages
find_package(pegtl REQUIRED)

find_package(lua)

find_package(sol2)

# Target luagenny_static
if(LUAGENNY_BUILD_STATIC) # static
	set(CMKR_TARGET luagenny_static)
	set(luagenny_static_SOURCES "")

	list(APPEND luagenny_static_SOURCES
		"src/LuaGenny.cpp"
		"src/classes/Array.cpp"
		"src/classes/Constant.cpp"
		"src/classes/Enum.cpp"
		"src/classes/Function.cpp"
		"src/classes/Namespace.cpp"
		"src/classes/Object.cpp"
		"src/classes/Parameter.cpp"
		"src/classes/Reference.cpp"
		"src/classes/Sdk.cpp"
		"src/classes/Struct.cpp"
		"src/classes/Type.cpp"
		"src/classes/Typename.cpp"
		"src/classes/Variable.cpp"
		"src/classes/VirtualFunction.cpp"
		"src/classes/Array.hpp"
		"src/classes/ClassMacros.hpp"
		"src/classes/Constant.hpp"
		"src/classes/Enum.hpp"
		"src/classes/Function.hpp"
		"src/classes/Namespace.hpp"
		"src/classes/Object.hpp"
		"src/classes/Parameter.hpp"
		"src/classes/Reference.hpp"
		"src/classes/Sdk.hpp"
		"src/classes/Struct.hpp"
		"src/classes/Type.hpp"
		"src/classes/Typename.hpp"
		"src/classes/Variable.hpp"
		"src/classes/VirtualFunction.hpp"
	)

	list(APPEND luagenny_static_SOURCES
		cmake.toml
	)

	set(CMKR_SOURCES ${luagenny_static_SOURCES})
	add_library(luagenny_static STATIC)

	if(luagenny_static_SOURCES)
		target_sources(luagenny_static PRIVATE ${luagenny_static_SOURCES})
	endif()

	source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${luagenny_static_SOURCES})

	add_library(luagenny::luagenny ALIAS luagenny_static)

	target_compile_features(luagenny_static PUBLIC
		cxx_std_20
	)

	if(MSVC) # msvc
		target_compile_options(luagenny_static PUBLIC
			"/bigobj"
		)
	endif()

	if(CMAKE_CXX_COMPILER_ID MATCHES "Clang" OR CMAKE_C_COMPILER_ID MATCHES "Clang") # clang
		target_compile_options(luagenny_static PUBLIC
			-fdeclspec
			-Wno-ignored-attributes
		)
	endif()

	target_include_directories(luagenny_static PUBLIC
		include
	)

	target_link_libraries(luagenny_static PUBLIC
		lua
		sol2
		sdkgenny
	)

	set_target_properties(luagenny_static PROPERTIES
		OUTPUT_NAME
			luagenny
	)

	unset(CMKR_TARGET)
	unset(CMKR_SOURCES)
endif()

# Target luagenny_shared
if(NOT LUAGENNY_BUILD_STATIC) # shared
	set(CMKR_TARGET luagenny_shared)
	set(luagenny_shared_SOURCES "")

	list(APPEND luagenny_shared_SOURCES
		"src/LuaGenny.cpp"
		"src/classes/Array.cpp"
		"src/classes/Constant.cpp"
		"src/classes/Enum.cpp"
		"src/classes/Function.cpp"
		"src/classes/Namespace.cpp"
		"src/classes/Object.cpp"
		"src/classes/Parameter.cpp"
		"src/classes/Reference.cpp"
		"src/classes/Sdk.cpp"
		"src/classes/Struct.cpp"
		"src/classes/Type.cpp"
		"src/classes/Typename.cpp"
		"src/classes/Variable.cpp"
		"src/classes/VirtualFunction.cpp"
		"src/classes/Array.hpp"
		"src/classes/ClassMacros.hpp"
		"src/classes/Constant.hpp"
		"src/classes/Enum.hpp"
		"src/classes/Function.hpp"
		"src/classes/Namespace.hpp"
		"src/classes/Object.hpp"
		"src/classes/Parameter.hpp"
		"src/classes/Reference.hpp"
		"src/classes/Sdk.hpp"
		"src/classes/Struct.hpp"
		"src/classes/Type.hpp"
		"src/classes/Typename.hpp"
		"src/classes/Variable.hpp"
		"src/classes/VirtualFunction.hpp"
	)

	list(APPEND luagenny_shared_SOURCES
		cmake.toml
	)

	set(CMKR_SOURCES ${luagenny_shared_SOURCES})
	add_library(luagenny_shared SHARED)

	if(luagenny_shared_SOURCES)
		target_sources(luagenny_shared PRIVATE ${luagenny_shared_SOURCES})
	endif()

	source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${luagenny_shared_SOURCES})

	add_library(luagenny::luagenny ALIAS luagenny_shared)
	target_compile_definitions(luagenny_shared PUBLIC
		LUAGENNY_EXPORTS
	)

	target_compile_features(luagenny_shared PUBLIC
		cxx_std_20
	)

	if(MSVC) # msvc
		target_compile_options(luagenny_shared PUBLIC
			"/bigobj"
		)
	endif()

	if(CMAKE_CXX_COMPILER_ID MATCHES "Clang" OR CMAKE_C_COMPILER_ID MATCHES "Clang") # clang
		target_compile_options(luagenny_shared PUBLIC
			-fdeclspec
			-Wno-ignored-attributes
		)
	endif()

	target_include_directories(luagenny_shared PUBLIC
		include
	)

	target_link_libraries(luagenny_shared PUBLIC
		lua
		sol2
		sdkgenny
	)

	set_target_properties(luagenny_shared PROPERTIES
		OUTPUT_NAME
			luagenny
	)

	unset(CMKR_TARGET)
	unset(CMKR_SOURCES)
endif()

# Target repl
set(CMKR_TARGET repl)
set(repl_SOURCES "")

list(APPEND repl_SOURCES
	"test/Main.cpp"
)

list(APPEND repl_SOURCES
	cmake.toml
)

set(CMKR_SOURCES ${repl_SOURCES})
add_executable(repl)

if(repl_SOURCES)
	target_sources(repl PRIVATE ${repl_SOURCES})
endif()

get_directory_property(CMKR_VS_STARTUP_PROJECT DIRECTORY ${PROJECT_SOURCE_DIR} DEFINITION VS_STARTUP_PROJECT)
if(NOT CMKR_VS_STARTUP_PROJECT)
	set_property(DIRECTORY ${PROJECT_SOURCE_DIR} PROPERTY VS_STARTUP_PROJECT repl)
endif()

source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${repl_SOURCES})

target_compile_features(repl PRIVATE
	cxx_std_20
)

target_include_directories(repl PRIVATE
	src
)

target_link_libraries(repl PRIVATE
	lua
	sol2
	luagenny::luagenny
	sdkgenny::sdkgenny
)

unset(CMKR_TARGET)
unset(CMKR_SOURCES)

enable_testing()

add_test(
	NAME
		mytest
	CONFIGURATIONS
		Debug
		Release
		RelWithDebInfo
		MinSizeRelease
	WORKING_DIRECTORY
		"${CMAKE_CURRENT_LIST_DIR}/"
	COMMAND
		"$<TARGET_FILE:repl>"
		--test
		"${CMAKE_CURRENT_SOURCE_DIR}/test/test.lua"
)

if(NOT LUAGENNY_BUILD_STATIC) # shared
	install(
		TARGETS
			luagenny_shared
			repl
		DESTINATION
			bin
		COMPONENT
			luagenny_shared
	)
endif()
if(LUAGENNY_BUILD_STATIC) # static
	install(
		TARGETS
			luagenny_static
			repl
		DESTINATION
			bin
		COMPONENT
			luagenny_static
	)
endif()
